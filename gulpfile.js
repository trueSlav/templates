const gulp = require('gulp');
const concat = require('gulp-concat-css');
const plumber = require('gulp-plumber');
const del = require('del');
const browserSync = require('browser-sync').create();
const postcss = require('gulp-postcss');
const autoprefixer = require('autoprefixer');
const postcssCombineMediaQuery = require('postcss-combine-media-query');
const cssnano = require('cssnano');
const htmlMinify = require('html-minifier');

function serve() {
	browserSync.init({
		server: { baseDir: './dist' },
	});
}

function html() {
	const options = {
		includeAutoGeneratedTags: true,
		removeAttributeQuotes: true,
		removeComments: true,
		removeRedundantAttributes: true,
		removeScriptTypeAttributes: true,
		removeStyleLinkTypeAttributes: true,
		sortClassName: true,
		useShortDoctype: true,
		collapseWhitespace: true,
	};

	return gulp
		.src('src/**/*.html')
		.pipe(plumber())
		.on('data', function (file) {
			const buferFile = Buffer.from(
				htmlMinify.minify(file.contents.toString(), options),
			);
			return (file.contents = buferFile);
		})
		.pipe(gulp.dest('dist/'))
		.pipe(browserSync.reload({ stream: true }));
}

function css() {
	const plugins = [autoprefixer(), postcssCombineMediaQuery(), cssnano()];
	return gulp
		.src('src/styles/**/*.css')
		.pipe(plumber())
		.pipe(concat('style.css'))
		.pipe(postcss(plugins))
		.pipe(gulp.dest('dist/'))
		.pipe(browserSync.reload({ stream: true }));
}

function images() {
	return gulp
		.src('src/images/**/*.{jpg,png,svg,gif,ico,webp,avif}')
		.pipe(gulp.dest('dist/images'))
		.pipe(browserSync.reload({ stream: true }));
}

function fonts() {
	return gulp
		.src('src/fonts/**/*')
		.pipe(gulp.dest('dist/fonts'))
		.pipe(browserSync.reload({ stream: true }));
}

function clean() {
	return del('dist');
}

function watchFiles() {
	gulp.watch(['src/**/*.html'], html);
	gulp.watch(['src/styles/**/*.css'], css);
	gulp.watch(['src/images/**/*.{jpg,png,svg,gif,ico,webp,avif}'], images);
	gulp.watch(['src/fonts/**/*'], fonts);
}

const build = gulp.series(clean, gulp.parallel(html, css, images, fonts));
const watcher = gulp.parallel(build, watchFiles, serve);

exports.html = html;
exports.css = css;
exports.images = images;
exports.fonts = fonts;

exports.clean = clean;
exports.build = build;
exports.watcher = watcher;
exports.default = watcher;
